/* ===============================
   ðŸ“Œ express.json()
   ===============================

- Built-in middleware in Express (since v4.16.0).
- Purpose: Parse incoming requests with JSON payloads.
- Adds the parsed data to `req.body`.

âœ… When to use:
- When client sends data as JSON (e.g., API requests).
- Example:
   fetch("/api", {
     method: "POST",
     headers: { "Content-Type": "application/json" },
     body: JSON.stringify({ name: "Aum", age: 20 })
   })

   // Server:
   app.use(express.json());
   app.post("/api", (req, res) => {
     console.log(req.body); // { name: "Aum", age: 20 }
   });

*/

/* ===============================
   ðŸ“Œ express.urlencoded()
   ===============================

- Built-in middleware in Express.
- Purpose: Parse incoming requests with URL-encoded payloads 
  (data from HTML forms).
- Adds parsed data to `req.body`.

âœ… When to use:
- When client sends data using forms with 
  `Content-Type: application/x-www-form-urlencoded`.

- Example:
   <form method="POST" action="/submit">
     <input name="username" value="Aum"/>
     <input name="age" value="20"/>
   </form>

   // Server:
   app.use(express.urlencoded({ extended: true }));
   app.post("/submit", (req, res) => {
     console.log(req.body); // { username: "Aum", age: "20" }
   });

âœ… Options:
- `extended: false`
   Uses querystring library â†’ simple objects only.
- `extended: true`
   Uses qs library â†’ supports nested objects (e.g., user[name]=Aum).

*/

/* ===============================
   ðŸ”„ express.json() vs express.urlencoded()
   ===============================

- express.json()
   â†’ Parse JSON payloads.
   â†’ Used in APIs / fetch / Axios requests.

- express.urlencoded()
   â†’ Parse URL-encoded payloads.
   â†’ Used in traditional HTML form submissions.

ðŸ‘‰ Common to use BOTH in apps:
   app.use(express.json());
   app.use(express.urlencoded({ extended: true }));
*/
